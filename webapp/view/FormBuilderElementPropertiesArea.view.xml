<mvc:View
  xmlns:core="sap.ui.core"
  xmlns:layout="sap.ui.layout"
  controllerName="csrdreporting.controller.FormBuilderElementPropertiesArea"
  xmlns:mvc="sap.ui.core.mvc"
  displayBlock="true"
  xmlns="sap.m"
  xmlns:controls="csrdreporting.controls">
  <ScrollContainer height="100%" vertical="true">
    <VBox class="sapUiMediumMargin">
      <VBox visible="{= !${state>/elementToEdit} }">
        <Text text="Select an element to edit its details." />
      </VBox>

      <VBox visible="{= !!${state>/elementToEdit} }">
        <VBox class="sapUiMediumMarginBottom" visible="{= ${state>/elementToEditProperties}.includes('id') }">
          <Label text="ID" />
          <Input value="{state>/elementToEdit/id}" />
          <Text text="A unique identifier of the element." />
        </VBox>

        <VBox class="sapUiMediumMarginBottom" visible="{= ${state>/elementToEditProperties}.includes('marginTop') }">
          <Label text="Top Margin" />
          <Select selectedKey="{state>/elementToEdit/marginTop}" width="100%">
            <core:ListItem enabled="false" />
            <core:ListItem key="None" text="None" />
            <core:ListItem key="Tiny" text="Tiny" />
            <core:ListItem key="Small" text="Small" />
            <core:ListItem key="Medium" text="Medium" />
            <core:ListItem key="Large" text="Large" />
          </Select>
          <Text text="The element's top margin." />
        </VBox>

        <VBox class="sapUiMediumMarginBottom" visible="{= ${state>/elementToEditProperties}.includes('marginBottom') }">
          <Label text="Bottom Margin" />
          <Select selectedKey="{state>/elementToEdit/marginBottom}" width="100%">
            <core:ListItem enabled="false" />
            <core:ListItem key="None" text="None" />
            <core:ListItem key="Tiny" text="Tiny" />
            <core:ListItem key="Small" text="Small" />
            <core:ListItem key="Medium" text="Medium" />
            <core:ListItem key="Large" text="Large" />
          </Select>
          <Text text="The element's bottom margin." />
        </VBox>

        <VBox class="sapUiMediumMarginBottom" visible="{= ${state>/elementToEditProperties}.includes('required') }">
          <Label text="Mandatory Element" />
          <CheckBox selected="{state>/elementToEdit/required}" text="Element is required" />
          <Text text="Whether the user must fill this element." />
        </VBox>

        <VBox class="sapUiMediumMarginBottom" visible="{= ${state>/elementToEditProperties}.includes('label') }">
          <Label text="Label" />
          <Input value="{state>/elementToEdit/label}" />
          <Text text="A label, displayed above the element." />
        </VBox>

        <VBox class="sapUiMediumMarginBottom" visible="{= ${state>/elementToEditProperties}.includes('description') }">
          <Label text="Description" />
          <TextArea rows="3" width="100%" value="{state>/elementToEdit/description}" />
          <Text text="A description of the element, describing its purpose in detail." />
        </VBox>

        <VBox class="sapUiMediumMarginBottom" visible="{= ${state>/elementToEditProperties}.includes('helperText') }">
          <Label text="Helper Text" />
          <TextArea rows="3" width="100%" value="{state>/elementToEdit/helperText}" />
          <Text
            text="An additional helper text providing granular information about the element, further enriching the information provided in the description."
          />
        </VBox>

        <VBox class="sapUiMediumMarginBottom" visible="{= ${state>/elementToEditProperties}.includes('text') }">
          <Label text="Text" />
          <TextArea value="{state>/elementToEdit/text}" width="100%" />
          <Text text="The text to be displayed." />
        </VBox>

        <VBox class="sapUiMediumMarginBottom" visible="{= ${state>/elementToEditProperties}.includes('level') }">
          <Label text="Level" />
          <StepInput min="1" max="6" value="{state>/elementToEdit/level}" />
          <Text text="The level (effectively, the size) of the heading." />
        </VBox>

        <VBox class="sapUiMediumMarginBottom" visible="{= ${state>/elementToEditProperties}.includes('wrap') }">
          <Label text="Wrap Text" />
          <CheckBox selected="{state>/elementToEdit/wrap}" text="Enable text wrapping" />
          <Text text="Whether long text should wrap to the next line(s)." />
        </VBox>

        <VBox class="sapUiMediumMarginBottom" visible="{= ${state>/elementToEditProperties}.includes('placeholder') }">
          <Label text="Placeholder" />
          <Input value="{state>/elementToEdit/placeholder}" />
          <Text text="A placeholder text which is displayed for empty inputs." />
        </VBox>

        <VBox class="sapUiMediumMarginBottom" visible="{= ${state>/elementToEditProperties}.includes('rows') }">
          <Label text="Rows" />
          <StepInput min="1" value="{state>/elementToEdit/rows}" />
          <Text text="The number of rows to display." />
        </VBox>

        <VBox class="sapUiMediumMarginBottom" visible="{= ${state>/elementToEditProperties}.includes('columns') }">
          <Label text="Columns" />
          <StepInput min="1" value="{state>/elementToEdit/columns}" />
          <Text text="The number of columns to display." />
        </VBox>

        <VBox class="sapUiMediumMarginBottom" visible="{= ${state>/elementToEditProperties}.includes('min') }">
          <Label text="Minimum Value" />
          <StepInput value="{state>/elementToEdit/min}" />
          <Text text="The minimum allowed value." />
        </VBox>

        <VBox class="sapUiMediumMarginBottom" visible="{= ${state>/elementToEditProperties}.includes('max') }">
          <Label text="Maximum Value" />
          <StepInput value="{state>/elementToEdit/max}" />
          <Text text="The maximum allowed value." />
        </VBox>

        <VBox
          class="sapUiMediumMarginBottom"
          visible="{= ${state>/elementToEditProperties}.includes('stepperDescription') }">
          <Label text="Value Description" />
          <Input value="{state>/elementToEdit/stepperDescription}" />
          <Text text="A description associated with the value, e.g., a unit." />
        </VBox>

        <VBox class="sapUiMediumMarginBottom" visible="{= ${state>/elementToEditProperties}.includes('options') }">
          <Label text="Options" required="true" />

          <Table id="multiChoiceOptions" items="{state>/elementToEdit/options}" fixedLayout="false" mode="MultiSelect">
            <headerToolbar>
              <OverflowToolbar>
                <content>
                  <Title text="Options" />
                  <ToolbarSpacer />
                  <Button icon="sap-icon://add" press="onAddChoiceOptionPress" tooltip="Add Option" />
                  <Button icon="sap-icon://delete" press="onRemoveChoiceOptionPress" tooltip="Delete Options" />
                </content>
              </OverflowToolbar>
            </headerToolbar>
            <columns>
              <Column>
                <Text text="ID" />
              </Column>
              <Column>
                <Text text="Display" />
              </Column>
            </columns>
            <items>
              <ColumnListItem>
                <cells>
                  <Input value="{state>value}" />
                  <Input value="{state>display}" />
                </cells>
              </ColumnListItem>
            </items>
          </Table>
        </VBox>

        <VBox class="sapUiMediumMarginBottom" visible="{= ${state>/elementToEditProperties}.includes('effects') }">
          <Label text="Effects" />
          <Text text="Effects allow you to conditionally show the element, based on expression trees. If an effect is defined, the element is hidden by default and only shown if the condition evaluates to true." />

          <List
            id="elementEffects"
            items="{state>/elementToEdit/effects}"
            mode="SingleSelectLeft"
            class="sapUiSmallMarginTop">
            <headerToolbar>
              <OverflowToolbar>
                <Text text="Element Effects" />
                <ToolbarSpacer />
                <Button icon="sap-icon://add" press="onAddElementEffectPress" />
                <ToolbarSeparator />
                <Button icon="sap-icon://delete" press="onDeleteElementEffectPress" />
              </OverflowToolbar>
            </headerToolbar>
            <CustomListItem>
              <VBox class="sapUiTinyMargin">
                <Select items="{state>/effectTypes}" selectedKey="{state>effect}" class="sapUiTinyMarginBottom">
                  <core:Item key="{state>type}" text="{state>displayName}" />
                </Select>

                <controls:ExpressionTreeEditor
                  expressionTree="{state>condition}"
                  schema="{state>/schema}"
                  class="sapUiSmallMarginBegin"
                />
              </VBox>
            </CustomListItem>
          </List>
        </VBox>

        <VBox
          class="sapUiMediumMarginBottom"
          visible="{= ${state>/elementToEditProperties}.includes('validationRules') }">
          <Label text="Validation Rules" />
          <Text
            text="Validation rules allow you to conditionally display element validation errors, based on expression trees."
          />

          <List
            id="elementValidationRules"
            items="{state>/elementToEdit/validationRules}"
            mode="SingleSelectLeft"
            class="sapUiSmallMarginTop">
            <headerToolbar>
              <OverflowToolbar>
                <Text text="Element Validation Rules" />
                <ToolbarSpacer />
                <Button icon="sap-icon://add" press="onAddElementValidationRulePress" />
                <ToolbarSeparator />
                <Button icon="sap-icon://delete" press="onDeleteElementValidationRulePress" />
              </OverflowToolbar>
            </headerToolbar>
            <CustomListItem>
              <VBox class="sapUiTinyMargin">
                <Input value="{state>message}" placeholder="Error message" />
                <controls:ExpressionTreeEditor
                  expressionTree="{state>condition}"
                  schema="{state>/schema}"
                  class="sapUiSmallMarginBegin"
                />
              </VBox>
            </CustomListItem>
          </List>
        </VBox>
      </VBox>
    </VBox>
  </ScrollContainer>
</mvc:View>
